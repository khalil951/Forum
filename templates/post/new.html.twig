{% extends 'base.html.twig' %}

{% block title %}New Post{% endblock %}

{% block body %}
    <h1>Create new Post</h1>
    <div style='transform: translate(-27rem,-5rem);'>
<button id='BackBtn'>
    <svg height="16" width="16" xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 1024 1024"><path d="M874.690416 495.52477c0 11.2973-9.168824 20.466124-20.466124 20.466124l-604.773963 0 188.083679 188.083679c7.992021 7.992021 7.992021 20.947078 0 28.939099-4.001127 3.990894-9.240455 5.996574-14.46955 5.996574-5.239328 0-10.478655-1.995447-14.479783-5.996574l-223.00912-223.00912c-3.837398-3.837398-5.996574-9.046027-5.996574-14.46955 0-5.433756 2.159176-10.632151 5.996574-14.46955l223.019353-223.029586c7.992021-7.992021 20.957311-7.992021 28.949332 0 7.992021 8.002254 7.992021 20.957311 0 28.949332l-188.073446 188.073446 604.753497 0C865.521592 475.058646 874.690416 484.217237 874.690416 495.52477z"></path></svg>
    <a href="{{ path('app_room_index') }}">
    <span>Back</span>
    </a>
</button>
</div>

    {{ form_start(form, {'attr': {'class': 'row mx-3', 'novalidate': 'novalidate'}}) }}

    <div class='mb-3'>
        {{ form_label(form.room, "Room", {'attr': {'class': 'form-label'}}) }}
        {{ form_widget(form.room, {'attr': {'class': 'form-select'}}) }}
        {{ form_errors(form.room) }}
    </div>

    <div class='mb-3'>
        {{ form_label(form.author, "Author", {'attr': {'class': 'form-label'}}) }}
        {{ form_widget(form.author, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.author) }}
    </div>

    <div class='mb-3'>
        {{ form_label(form.content, "Content", {'attr': {'class': 'form-label'}}) }}
        {{ form_widget(form.content, {'attr': {'class': 'form-control', 'autocomplete': 'off'}}) }}
        {{ form_errors(form.content) }}
    </div>

    <div class='mb-3'>
        {{ form_label(form.img_url, "Image Path", {'attr': {'class': 'form-label'}}) }}
        {{ form_widget(form.img_url, {'attr': {'class': 'form-control'}}) }}
        {{ form_errors(form.img_url) }}
    </div>

    <div class='mb-3' style="text-align:center">
        <row>
            <button class="bg-indigo-900 text-gray-100 border border-indigo-900 border-b-4 font-medium overflow-hidden relative px-4 py-2 rounded-md hover:brightness-150 hover:border-t-4 hover:border-b active:opacity-75 outline-none duration-300 group" style='width:100px'>
            <span class="bg-gray-100 shadow-indigo-900 absolute -top-[150%] left-0 inline-flex w-80 h-[5px] rounded-md opacity-50 group-hover:top-[150%] duration-500 shadow-[0_0_10px_10px_rgba(0,0,0,0.3)]"></span>
                Save
            </button>
        </rom>
    </div>

 
    <style>
    li {
        color: #E45449;
    }

    .suggestion-container {
        position: absolute; 
        left: 15rem; 
        bottom : 14rem;
        z-index: 1000; 
        background-color: white; 
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); 
        
    }

    .suggestion-item {
        padding: 10px; 
        cursor: pointer;
        color: #ADA8AB !important;
    }

    .suggestion-item:hover {
        background-color: #f0f0f0; 
    }
</style>

<script>
    const content = document.querySelector('#post_content');

    const appendSuggestion = (suggestion) => {
    // Check if there's an existing suggestion container and remove it
    const existingSuggestion = content.parentElement.querySelector('.suggestion-container');
    if (existingSuggestion) {
        existingSuggestion.remove();
    }

    const suggestion_container = document.createElement("div");
    const suggestion_item = document.createElement("p");
    suggestion_item.innerHTML = suggestion;
    suggestion_container.classList.add('suggestion-container');
    suggestion_item.classList.add('suggestion-item');
    suggestion_container.appendChild(suggestion_item); 

    const parentElement = content.parentElement;
    parentElement.insertBefore(suggestion_container, content.nextElementSibling);  
}




    const autosuggest = async (query) => {
        const options = {
            method: 'GET',
            url: 'https://auto-suggest-queries.p.rapidapi.com/suggestqueries',
            params: { query: query },
            headers: {
                'X-RapidAPI-Key': '77280ef4bfmsh5a1c660eaa091abp16b165jsned5b547e4d20',
                'X-RapidAPI-Host': 'auto-suggest-queries.p.rapidapi.com'
            }
        };

        try {
            const response = await axios.request(options);
            let suggestion = response.data[0];
            console.log(suggestion);
            console.log(typeof suggestion);
            appendSuggestion(suggestion);

        } catch (error) {
            console.error(error);
        }
    }

    let searchTimeoutToken = 0;

    window.onload = () => {
        content.addEventListener('keyup', (evt) => {
            clearTimeout(searchTimeoutToken);
            const contentValue = content.value.trim();
            let suggestion = document.querySelector('.suggestion-item');
            let suggestion_container = document.querySelector('.suggestion-container');
            if (event.keyCode === 39 && suggestion != null ) 
                { 
                    content.value = suggestion.innerHTML;
                }     
            if (contentValue.length === 0) {
                suggestion.style.display = 'none';                
                return;
            }
            searchTimeoutToken = setTimeout(() => {
                autosuggest(contentValue);
            }, 250);
        });
    }
</script>


{% endblock %}
